package org.iplantc.de.server;

import java.io.Serializable;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Properties;

import org.hibernate.Hibernate;
import org.hibernate.HibernateException;
import org.hibernate.usertype.EnhancedUserType;
import org.hibernate.usertype.ParameterizedType;
import org.hibernate.util.ReflectHelper;

/**
 * A generic UserType that handles String-based JDK 5.0 Enums.
 * 
 * @author Gavin King
 */
public class StringEnumUserType implements EnhancedUserType, ParameterizedType {

    @SuppressWarnings("rawtypes")
    private Class<Enum> enumClass;

    /**
     * Sets the parameter values for the properties specified.
     * 
     * @param parameters collection of parameter values.
     */
    @SuppressWarnings("unchecked")
    public void setParameterValues(Properties parameters) {
        String enumClassName = parameters.getProperty("enumClassname"); //$NON-NLS-1$
        try {
            enumClass = ReflectHelper.classForName(enumClassName);
        } catch (ClassNotFoundException cnfe) {
            throw new HibernateException("Enum class not found", cnfe); //$NON-NLS-1$
        }
    }

    /**
     * Returns a class object for the underlying enum representation.
     * 
     * @return an instance of the underlying enum representation.
     */
    @SuppressWarnings("rawtypes")
    public Class returnedClass() {
        return enumClass;
    }

    /**
     * Gets the supported SQL types for the enum.
     * 
     * @return an array of supported SQL types.
     */
    public int[] sqlTypes() {
        return new int[] {Hibernate.STRING.sqlType()};
    }

    /**
     * Indicates if the enum is mutable.
     * 
     * @return false if the enum is not modifiable; otherwise true.
     */
    public boolean isMutable() {
        return false;
    }

    /**
     * Performs a deep copy.
     * 
     * This implementation is merely a pass-through implementation.
     * 
     * @param value object to copy.
     * @return a reference to the new copy.
     */
    public Object deepCopy(Object value) {
        return value;
    }

    /**
     * Breaks down the object into a serializable representation.
     * 
     * @param value the object to serialize.
     * @return a serializable representation of the object.
     */
    @SuppressWarnings("rawtypes")
    public Serializable disassemble(Object value) {
        return (Enum)value;
    }

    /**
     * Replaces the original with the target.
     * 
     * This implementation merely returns the 'original' argument.
     * 
     * @param original the original object representation.
     * @param target the target object to replace.
     * @param owner the owner of the target.
     * @return a reference to the original object.
     */
    public Object replace(Object original, Object target, Object owner) {
        return original;
    }

    /**
     * Builds up an object representation.
     * 
     * This implementation merely passes along the 'cached' argument.
     * 
     * @param cached the cached serializable representation
     * @param owner the owner of the target.
     * @return a reference to the cached object.
     */
    public Object assemble(Serializable cached, Object owner) {
        return cached;
    }

    /**
     * {@inheritDoc}
     */
    public boolean equals(Object x, Object y) {
        return x == y;
    }

    /**
     * {@inheritDoc}
     */
    public int hashCode(Object x) {
        return x.hashCode();
    }

    /**
     * Create a enum from an XML string representation.
     * 
     * @param xmlValue a valid XML representation.
     * @return an enum representation of the value.
     */
    @SuppressWarnings("unchecked")
    public Object fromXMLString(String xmlValue) {
        return Enum.valueOf(enumClass, xmlValue);
    }

    /**
     * Convert from an object representation to a SQL string representation.
     * 
     * @param value a valid object representation.
     * @return a valid SQL string representation of the value.
     */
    @SuppressWarnings("rawtypes")
    public String objectToSQLString(Object value) {
        return '\'' + ((Enum)value).name() + '\'';
    }

    /**
     * Returns an XML string representation of the value.
     * 
     * @param value a valid object representation.
     * @return an XML string representation of the value.
     */
    @SuppressWarnings("rawtypes")
    public String toXMLString(Object value) {
        return ((Enum)value).name();
    }

    /**
     * Performs a safe "get" operation to retrieve the enum value.
     * 
     * @param rs a database result set from a query.
     * @param names an array of names, expected to be a single element.
     * @param owner the owner of the object.
     * @return a reference to the enum if successful; otherwise null.
     * @throws SQLException can be generated by interaction with the result set.
     */
    @SuppressWarnings("unchecked")
    public Object nullSafeGet(ResultSet rs, String[] names, Object owner) throws SQLException {
        String name = rs.getString(names[0]);
        return rs.wasNull() ? null : Enum.valueOf(enumClass, name);
    }

    /**
     * Performs a safe "set" operation to modify the enum value in a prepared statement.
     * 
     * @param st the prepared statement to modify.
     * @param value the enum value to set.
     * @param index the ordeal index to set within the prepared statement.
     * @throws SQLException can be generated by interaction with the prepared statement.
     */
    @SuppressWarnings("rawtypes")
    public void nullSafeSet(PreparedStatement st, Object value, int index) throws SQLException {
        if (value == null) {
            st.setNull(index, Hibernate.STRING.sqlType());
        } else {
            st.setString(index, ((Enum)value).name());
        }
    }
}