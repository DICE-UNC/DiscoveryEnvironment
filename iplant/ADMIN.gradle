import org.gradle.logging.StyledTextOutput;
import org.gradle.logging.StyledTextOutputFactory;
import static org.gradle.logging.StyledTextOutput.Style;

// Project Remote Repository URIs
def deWebappGitUri = "git@github.com:iPlantCollaborativeOpenSource/de-webapp.git"
def belphegorGitUri = "git@github.com:iPlantCollaborativeOpenSource/belphegor.git"
def clavinJavaGitUri = "git@github.com:iPlantCollaborativeOpenSource/clavin-java.git"
def confluenceClientGitUri = "git@github.com:iPlantCollaborativeOpenSource/confluence-client.git"
def deCommonModuleGitUri = "git@github.com:iPlantCollaborativeOpenSource/de-common-module.git"
def uiDiskResourceModuleGitUri = "git@github.com:iPlantCollaborativeOpenSource/ui-disk-resource-module.git"
def uiApplicationsModuleGitUri = "git@github.com:iPlantCollaborativeOpenSource/ui-applications-module.git"
def uiAppsIntegrationGitUri = "git@github.com:iPlantCollaborativeOpenSource/ui-apps-integration.git"
def uiAppsWidgetsModuleGitUri = "git@github.com:iPlantCollaborativeOpenSource/ui-apps-widgets-module.git"
def uiCommonsModuleGitUri = "git@github.com:iPlantCollaborativeOpenSource/ui-commons-module.git"
def uiPipelineBuilderModuleGitUri = "git@github.com:iPlantCollaborativeOpenSource/ui-pipeline-builder-module.git"
def uiPipelinesModuleGitUri = "git@github.com:iPlantCollaborativeOpenSource/ui-pipelines-module.git"
def uiResourcesModuleGitUri = "git@github.com:iPlantCollaborativeOpenSource/ui-resources-module.git"

// Project Remote tracking git ref
def deWebappUpstream = "deWebapp"
def belphegorUpstream = "belphegor"
def clavinJavaUpstream = "clavin"
def confluenceClientUpstream = "confluenceClient"
def deCommonModuleUpstream = "de-common"
def uiDiskResourceModuleUpstream = "disk-resource-module"
def uiApplicationsModuleUpstream = "apps-module"
def uiAppsIntegrationUpstream = "apps-integration-module"
def uiAppsWidgetsModuleUpstream = "apps-widgets-module"
def uiCommonsModuleUpstream = "commons-module"
def uiPipelineBuilderModuleUpstream = "pipeline-builder-module"
def uiPipelinesModuleUpstream = "pipelines-module"
def uiResourcesModuleUpstream = "resources-module"

task fetchAll (type: Exec) {
   description 'Performs a \'git fetch\' command'
   group 'Git'
   workingDir project.projectDir
   commandLine 'git', 'fetch', '--all'
   doFirst { out.withStyle(Style.ProgressStatus).println('>> Fetching all Remotes') }
}

project(':de-webapp') { 
   ext.remoteUri = deWebappGitUri 
   ext.remoteRef = deWebappUpstream
   ext.subtreePrefix = deWebappSubtreePrefix
}

project(':belphegor') { 
   ext.remoteUri = belphegorGitUri 
   ext.remoteRef = belphegorUpstream
   ext.subtreePrefix = belphegorSubtreePrefix
}

project(':confluence-client') { 
   ext.remoteUri = confluenceClientGitUri 
   ext.remoteRef = confluenceClientUpstream
   ext.subtreePrefix = confluenceClientSubtreePrefix
}

project(':ui-apps-integration') { 
   ext.remoteUri = uiAppsIntegrationGitUri 
   ext.remoteRef = uiAppsIntegrationUpstream
   ext.subtreePrefix = uiAppsIntegrationSubtreePrefix
}

project(':ui-apps-widgets-module') { 
   ext.remoteUri = uiAppsWidgetsModuleGitUri 
   ext.remoteRef = uiAppsWidgetsModuleUpstream
   ext.subtreePrefix = uiAppsWidgetsModuleSubtreePrefix
}

project(':ui-disk-resource-module') { 
   ext.remoteUri = uiDiskResourceModuleGitUri 
   ext.remoteRef = uiDiskResourceModuleUpstream
   ext.subtreePrefix = uiDiskResourceModuleSubtreePrefix
}

project(':ui-pipelines-module') { 
   ext.remoteUri = uiPipelinesModuleGitUri 
   ext.remoteRef = uiPipelinesModuleUpstream
   ext.subtreePrefix = uiPipelinesModuleSubtreePrefix
}

project(':ui-pipeline-builder-module') { 
   ext.remoteUri = uiPipelineBuilderModuleGitUri 
   ext.remoteRef = uiPipelineBuilderModuleUpstream
   ext.subtreePrefix = uiPipelineBuilderModuleSubtreePrefix
}

project(':ui-applications-module') { 
   ext.remoteUri = uiApplicationsModuleGitUri 
   ext.remoteRef = uiApplicationsModuleUpstream
   ext.subtreePrefix = uiApplicationsModuleSubtreePrefix
}

project(':ui-commons-module') { 
   ext.remoteUri = uiCommonsModuleGitUri 
   ext.remoteRef = uiCommonsModuleUpstream
   ext.subtreePrefix = uiCommonsModuleSubtreePrefix
}

project(':de-common-module') { 
   ext.remoteUri = deCommonModuleGitUri 
   ext.remoteRef = deCommonModuleUpstream
   ext.subtreePrefix = deCommonModuleSubtreePrefix
}

project(':ui-resources-module') { 
   ext.remoteUri = uiResourcesModuleGitUri 
   ext.remoteRef = uiResourcesModuleUpstream
   ext.subtreePrefix = uiResourcesModuleSubtreePrefix
}

project(':clavin-java') { 
   ext.remoteUri = clavinJavaGitUri 
   ext.remoteRef = clavinJavaUpstream
   ext.subtreePrefix = clavinJavaSubtreePrefix
}

subprojects {
    def out = services.get(StyledTextOutputFactory).create("org.iplantc.gradle.git.logger")
   task initSubtreeRemote (type: Exec) {
      group 'ADMIN'
      description 'Adds all of the git repos associated with each subproject as a git remote.\n\tThis task should not be needed after initial setup.'
      workingDir rootProject.projectDir
      commandLine 'git', 'remote', 'add', '-f', project.remoteRef, project.remoteUri
      doFirst { out.withStyle(Style.ProgressStatus).println(">> Adding remote for ${project.name}") }
   }

   task removeSubtreeRemote (type: Exec) {
      group 'ADMIN'
      description 'Removes the remote associated with this project'
      workingDir rootProject.projectDir
      commandLine 'git', 'remote', 'rm', project.remoteRef
      doFirst { out.withStyle(Style.ProgressStatus).println(">> Removing remote for ${project.name}") }
   }

   task addSubtree (type: Exec) {
      group 'ADMIN'
      description 'This task adds all of the subproject repos as subtrees.\n\tThis task should not be needed after initial setup'
      workingDir rootProject.projectDir
      commandLine 'git', 'subtree', 'add', '--prefix', project.subtreePrefix, project.remoteRef, 'master', '--squash'
      doFirst { out.withStyle(Style.ProgressStatus).println(">> Adding subtree for ${project.name}") } 
   }

   task pullUpstream (type: Exec) {
      group 'ADMIN'
      description 'Pulls upstream changes into subtree'
      workingDir rootProject.projectDir
      commandLine 'git', 'subtree', 'pull', '--prefix', project.subtreePrefix, project.remoteRef, 'master'
      doFirst { out.withStyle(Style.ProgressStatus).println(">> Pulling upstream subtree changes for ${project.name}") } 
   }

}

